// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Globalization;
using System.Text;
using System.Xml.Serialization;

namespace WhatsAppTools.Core.iOS
{
    [Table("ZWAMESSAGE")]
    public partial class Message
    {
        [Key]
        [Column("Z_PK")]
        [XmlIgnore]
        public long ZPk { get; set; }

        [Column("Z_ENT")]
        [XmlIgnore]
        public long? ZEnt { get; set; }

        [Column("Z_OPT")]
        [XmlIgnore]
        public long? ZOpt { get; set; }

        [Column("ZCHILDMESSAGESDELIVEREDCOUNT")]
        [XmlIgnore]
        public long? Zchildmessagesdeliveredcount { get; set; }

        [Column("ZCHILDMESSAGESPLAYEDCOUNT")]
        [XmlIgnore]
        public long? Zchildmessagesplayedcount { get; set; }

        [Column("ZCHILDMESSAGESREADCOUNT")]
        [XmlIgnore]
        public long? Zchildmessagesreadcount { get; set; }

        [Column("ZDATAITEMVERSION")]
        [XmlIgnore]
        public long? Zdataitemversion { get; set; }

        [Column("ZDOCID")]
        [XmlIgnore]
        public long? Zdocid { get; set; }

        [Column("ZENCRETRYCOUNT")]
        [XmlIgnore]
        public long? Zencretrycount { get; set; }

        [Column("ZFILTEREDRECIPIENTCOUNT")]
        [XmlIgnore]
        public long? Zfilteredrecipientcount { get; set; }

        [Column("ZFLAGS")]
        [XmlIgnore]
        public long? Zflags { get; set; }

        [Column("ZGROUPEVENTTYPE")]
        [XmlIgnore]
        public long? Zgroupeventtype { get; set; }

        [Column("ZISFROMME")]
        public long? IsFromMe { get; set; }

        [Column("ZMESSAGEERRORSTATUS")]
        [XmlIgnore]
        public long? Zmessageerrorstatus { get; set; }

        [Column("ZMESSAGESTATUS")]
        [XmlIgnore]
        public long? Zmessagestatus { get; set; }

        [Column("ZMESSAGETYPE")]
        public long? MessageType { get; set; }

        [Column("ZSORT")]
        [XmlIgnore]
        public long? Zsort { get; set; }

        [Column("ZSPOTLIGHTSTATUS")]
        [XmlIgnore]
        public long? Zspotlightstatus { get; set; }

        [Column("ZSTARRED")]
        public long? Starred { get; set; }

        [Column("ZCHATSESSION")]
        [XmlIgnore]
        public long? Zchatsession { get; set; }

        [Column("ZGROUPMEMBER")]
        [XmlIgnore]
        public long? Zgroupmember { get; set; }

        [Column("ZLASTSESSION")]
        [XmlIgnore]
        public long? Zlastsession { get; set; }

        [Column("ZMEDIAITEM")]
        [XmlIgnore]
        public long? Zmediaitem { get; set; }

        [Column("ZMESSAGEINFO")]
        [XmlIgnore]
        public long? Zmessageinfo { get; set; }

        [Column("ZPARENTMESSAGE")]
        [XmlIgnore]
        public long? Zparentmessage { get; set; }

        [Column("ZMESSAGEDATE", TypeName = "TIMESTAMP")]
        [XmlIgnore]
        public byte[] ZmessageDate { get; set; }

        [NotMapped]
        public DateTime? MessageDate
        {
            get
            {
                var secondsString = Encoding.UTF8.GetString(ZmessageDate);
                if (double.TryParse(secondsString, NumberStyles.Float | NumberStyles.AllowThousands, CultureInfo.InvariantCulture, out var seconds))
                    return new DateTime(2001, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(seconds).ToLocalTime();
                else
                    return null;
            }
            set { }
        }

        [Column("ZSENTDATE", TypeName = "TIMESTAMP")]
        [XmlIgnore]
        public byte[] ZsentDate { get; set; }

        [Column("ZFROMJID", TypeName = "VARCHAR")]
        public string FromJId { get; set; }

        [Column("ZMEDIASECTIONID", TypeName = "VARCHAR")]
        [XmlIgnore]
        public string Zmediasectionid { get; set; }

        [Column("ZPHASH", TypeName = "VARCHAR")]
        [XmlIgnore]
        public string Zphash { get; set; }

        [Column("ZPUSHNAME", TypeName = "VARCHAR")]
        [XmlIgnore]
        public string Zpushname { get; set; }

        [Column("ZSTANZAID", TypeName = "VARCHAR")]
        [XmlIgnore]
        public string Zstanzaid { get; set; }

        [Column("ZTEXT", TypeName = "VARCHAR")]
        public string Text { get; set; }

        [Column("ZTOJID", TypeName = "VARCHAR")]
        public string ToJId { get; set; }
    }
}